[config]
skip_core_tasks = true

[env]
MAIN_CHANGELOG_FILE = "CHANGELOG.md"
SNAPSHOT_CHANGELOG_FILE = "CHANGELOG_SNAPSHOT.md"

##################
# TERMINAL TASKS #
##################

# to run all type of tests without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set
[tasks.test-noenv-unit]
description = "Run unit tests without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--lib"]

[tasks.test-noenv-unit-local-templating]
description = "Run unit tests with local_templating feature enabled without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--lib", "--features", "local_templating"]

[tasks.test-noenv-isolation]
description = "Run isolation tests without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--test", "isolation_tests"]

[tasks.test-noenv-isolation-local-templating]
description = "Run isolation tests with local_templating feature enabled without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--test", "isolation_tests", "--features", "local_templating"]

[tasks.test-noenv-integration]
description = "Run integration tests without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--test", "integration_tests"]

[tasks.test-noenv-integration-local-templating]
description = "Run integration tests with local_templating feature enabled without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--test", "integration_tests", "--features", "local_templating"]

# to run all type of tests with GITIGNORE_TEMPLATE_GENERATOR_HOME env var set
[tasks.test-env-unit]
description = "Run unit tests with GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--lib"]
env = { GITIGNORE_TEMPLATE_GENERATOR_HOME = "/some/path" }

[tasks.test-env-unit-local-templating]
description = "Run unit tests with local_templating feature enabled and GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--lib", "--features", "local_templating"]
env = { GITIGNORE_TEMPLATE_GENERATOR_HOME = "/some/path" }

[tasks.test-env-isolation]
description = "Run isolation tests with GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--test", "isolation_tests"]
env = { GITIGNORE_TEMPLATE_GENERATOR_HOME = "/some/path" }

[tasks.test-env-isolation-local-templating]
description = "Run isolation tests with local_templating feature enabled and GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--test", "isolation_tests", "--features", "local_templating"]
env = { GITIGNORE_TEMPLATE_GENERATOR_HOME = "/some/path" }

[tasks.test-env-integration]
description = "Run isolation tests with local_templating feature enabled and GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--test", "integration_tests"]
env = { GITIGNORE_TEMPLATE_GENERATOR_HOME = "/some/path" }

[tasks.test-env-integration-local-templating]
description = "Run integration tests with local_templating feature enabled and GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
command = "cargo"
args = ["test", "--test", "integration_tests", "--features", "local_templating"]
env = { GITIGNORE_TEMPLATE_GENERATOR_HOME = "/some/path" }

# to lint codebase
[tasks.lint-check]
description = "Lint codebase with clippy"
install_crate = { rustup_component_name = "clippy", binary = "cargo-clippy", test_arg = "--help" }
command = "cargo"
args = ["clippy", "--all-targets", "--all-features"]

[tasks.lint-apply]
description = "Lint codebase with clippy"
install_crate = { rustup_component_name = "clippy", binary = "cargo-clippy", test_arg = "--help" }
command = "cargo"
args = ["clippy", "--all-targets", "--all-features", "--fix"]

# to interact with trello api
[tasks.trello-bump-version]
description = "Update trello board name with content of .version file"
script = '''
new_version=$(cat .version)
new_name="gitignore-template-generator+${new_version}"
key=$(cat "$TRELLO_API_KEY")
token=$(cat "$TRELLO_API_TOKEN")
curl -o /dev/null -s -X PUT "https://api.trello.com/1/boards/FZLDdiLN?name=${new_name}&key=${key}&token=${token}"
echo "Trello board version bumped to ${new_version}"
'''

[tasks.trello-rename-cards]
description = "Update trello card names in Done column with content of .version file"
script = '''
old_version=$(cat .version)
key=$(cat "$TRELLO_API_KEY")
token=$(cat "$TRELLO_API_TOKEN")
curl -s "https://api.trello.com/1/lists/68027d1040324003560f3169/cards?key=${key}&token=${token}" | jq -c '.[] | {id, name}' |
while read -r card; do
  card_name=$(echo "${card}" | jq -r '.name')
  card_id=$(echo "${card}" | jq -r '.id')
  url_encoded_card_name=$(jq -rn --arg v "$card_name" '$v|@uri')
  new_name="${old_version}+-+${url_encoded_card_name}"
  curl -o /dev/null -s -X PUT "https://api.trello.com/1/cards/${card_id}?name=${new_name}&idList=68027e5026b59f970b733488&key=${key}&token=${token}"
  echo "Renamed card ${card_id} with version specifier"
done
'''

[tasks.trello-archive-cards]
description = "Move trello cards from Done to History column"
script = '''
key=$(cat "$TRELLO_API_KEY")
token=$(cat "$TRELLO_API_TOKEN")
card_ids=$(curl -s "https://api.trello.com/1/lists/68027d1040324003560f3169/cards?key=${key}&token=${token}" | jq -r '.[].id')
for card_id in $card_ids; do
  curl -o /dev/null -s -X PUT "https://api.trello.com/1/cards/${card_id}?idList=68027e5026b59f970b733488&key=${key}&token=${token}"
  echo "Moved card ${card_id} to History column"
done
'''

# to deploy new crate version
[tasks.deploy]
description = "Deploy crate to crates.io with value of BUMP_LEVEL"
condition = { env_set = ["BUMP_LEVEL"] }
command = "cargo"
args = ["release", "${BUMP_LEVEL}", "--execute", "--no-confirm", "--no-verify"]

[tasks.deploy-dryrun]
description = "Simulate crate deployment to crates.io with value of BUMP_LEVEL"
condition = { env_set = ["BUMP_LEVEL"] }
command = "cargo"
args = ["release", "${BUMP_LEVEL}", "--no-confirm", "--no-verify"]

# to manage changelogs
[tasks.changelog-generate]
description = "Generate changelogs for unreleased commits in CHANGELOG_SNAPSHOT.md"
install_crate = "git-cliff"
command = "git"
args = [
  "cliff",
  "--unreleased",
  "-o",
  "${SNAPSHOT_CHANGELOG_FILE}",
  "--verbose",
  "--workdir",
  ".",
  "--strip",
  "all",
]

[tasks.changelog-bump]
description = "Bump sCHANGELOG_SNAPSHOT.md into CHANGELOG.md"
condition = { files_exist = ["${SNAPSHOT_CHANGELOG_FILE}"] }
script = [
  "sed '/./,$!d' ${SNAPSHOT_CHANGELOG_FILE} | tac | sed '/./,$!d' | tac > tmp && mv tmp ${SNAPSHOT_CHANGELOG_FILE}",
  "sed -e \"/@Content/{r ${SNAPSHOT_CHANGELOG_FILE}\" -e 'd}' ${MAIN_CHANGELOG_FILE} > tmp && mv tmp ${MAIN_CHANGELOG_FILE}",
  "rm ${SNAPSHOT_CHANGELOG_FILE}",
]

# to interact with git vcs
[tasks.git-push]
description = "Push all commits to github repo"
command = "git"
args = ["push"]

[tasks.git-add-all]
description = "Add all unstaged changes to staging area"
command = "git"
args = ["add", "."]

[tasks.git-add-changelog]
description = "Add CHANGELOG.md to staging area"
command = "git"
args = ["add", "CHANGELOG.md"]

[tasks.git-commit-changelog]
description = "Commit with specific changelog message"
command = "git"
args = ["commit", "-m", "chore(changelog): update file"]

[tasks.git-commit-format]
description = "Commit with specific code formatting message"
command = "git"
args = ["commit", "-m", "style: reformat code with rustfmt"]

[tasks.git-commit-lint]
description = "Commit with specific lint message"
command = "git"
args = ["commit", "-m", "refactor(lint): apply all clippy lint corrections"]

# to handle crate documentation
[tasks.doc-generate]
description = "Generate crate documentation"
command = "cargo"
args = ["doc"]

[tasks.doc-remove-main-index]
description = "Remove main doc file at 'target/doc/gitignore_template_generator/index.html'"
command = "rm"
args = ["-f", "target/doc/gitignore_template_generator/index.html"]

# to format codebase
[tasks.format-check]
description = "Check codebase format with rustfmt"
toolchain = "nightly"
install_crate = { rustup_component_name = "rustfmt", binary = "cargo-fmt", test_arg = "--help" }
command = "cargo"
args = ["fmt", "--check", "--", "--unstable-features"]

[tasks.format-apply]
description = "Check codebase format with rustfmt"
toolchain = "nightly"
install_crate = { rustup_component_name = "rustfmt", binary = "cargo-fmt", test_arg = "--help" }
command = "cargo"
args = ["fmt", "--", "--unstable-features"]


##############
# META TASKS #
##############

[tasks.test-noenv]
description = "[META TASK] Run unit, isolation and integration tests without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
dependencies = [
  "test-noenv-unit",
  "test-noenv-unit-local-templating",
  "test-noenv-isolation",
  "test-noenv-isolation-local-templating",
  "test-noenv-integration",
  "test-noenv-integration-local-templating",
]

[tasks.test-env]
description = "[META TASK] Run unit, isolation and integration tests with GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
dependencies = [
  "test-env-unit",
  "test-env-unit-local-templating",
  "test-env-isolation",
  "test-env-isolation-local-templating",
  "test-env-integration",
  "test-env-integration-local-templating",
]

[tasks.test]
description = "[META TASK] Run unit, isolation and integration tests with and without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
dependencies = ["test-noenv", "test-env"]

[tasks.validate]
description = "[META TASK] Test—with and without GITIGNORE_TEMPLATE_GENERATOR_HOME env var set—lint, and check format of codebase"
dependencies = ["test", "lint-build", "format-check"]

[tasks.trello]
description = "[META TASK] Update state of Trello board associated to this project to reflect new version release"
dependencies = [
  "trello-bump-version",
  "trello-rename-cards",
  "trello-archive-cards",
]

[tasks.release]
description = "[META TASK] Release a new crate version with value of BUMP_LEVEL and update trello board associated to this project"
dependencies = ["deploy", "trello"]

[tasks.release-dryrun]
description = "[META TASK] Simulate a new crate version release with value of BUMP_LEVEL"
dependencies = ["deploy-dryrun"]

[tasks.changelog-build]
description = "[META TASK] Generate changelogs for upcoming release and bump it in CHANGELOG.md"
dependencies = ["changelog-generate", "changelog-bump"]

[tasks.changelog-save]
description = "[META TASK] Commit and push CHANGELOG.md to github repo"
dependencies = ["git-add-changelog", "git-commit-changelog", "git-push"]

[tasks.changelog]
description = "[META TASK] Generate changelogs for upcoming release, bump it in CHANGELOG.md, and push it to github repo"
dependencies = ["changelog-build", "changelog-save"]

[tasks.doc]
description = "[META TASK] Remove main doc file at './target/doc/gitignore_template_generator/index.html' and regenerate crate documentation"
dependencies = ["doc-remove-main-index", "doc-generate"]

[tasks.format-build]
description = "[META TASK] Format codebase"
dependencies = ["format-apply"]

[tasks.format-save]
description = "[META TASK] Commit and push code format changes to github repo"
dependencies = ["git-add-all", "git-commit-format", "git-push"]

[tasks.format]
description = "[META TASK] Format codebase and push any changes to github repo"
dependencies = ["format-build", "format-save"]

[tasks.lint-build]
description = "[META TASK] Lint codebase"
dependencies = ["lint-apply"]

[tasks.lint-save]
description = "[META TASK] Lint codebase"
dependencies = ["git-add-all", "git-commit-lint", "git-push"]

[tasks.lint]
description = "[META TASK] Lint codebase and push any changes to github repo"
dependencies = ["lint-build", "lint-save"]
